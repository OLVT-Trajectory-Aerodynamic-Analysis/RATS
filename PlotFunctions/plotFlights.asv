function plotFlights(sourceList)
% This function creates plots of the main data (altitude, tilt, vel,
% accel, atm), the data collected from each sensor is overlayed into one plot 

% Initialize the Figures
set(0,'DefaultFigureWindowStyle','docked')
figure('Name','Position','NumberTitle','off')
hold on; grid on
figure('Name','Vel','NumberTitle','off')
hold on; grid on
figure('Name','Accel','NumberTitle','off')
hold on; grid on
figure('Name','Gyro','NumberTitle','off')
hold on; grid on
figure('Name','Atmosphere','NumberTitle','off')
hold on; grid on
figure('Name','MaxQ','NumberTitle','off')
hold on; grid on

%% Create legendList
legendList = strings(1, length(sourceList) );
for i = 1:length(sourceList)
    legendList(1, i) = sourceList{1, i}.dataType;
end


%% Graph Positions 
figure(1)
for i = 1:length(sourceList)
    time = sourceList{1, i}.time;
    altitude = sourceList{1, i}.position.altitude;
    plot(time, altitude)
    hold on
end
title('Altitude')
xlabel('Time [s]'); ylabel('Altitude [m]')
hold off

%% Graph Velocities
figure(2)
for i = 1:length(sourceList)
    time = sourceList{1, i}.time;
    vMag = sourceList{1, i}.velocity.magnitude;
    plot(time, vMag)
    hold on
end
title('Velocity')
xlabel('Time [s]'); ylabel('Velocity [m s^-1]')
hold off

%% Graph Acceleration
figure(3)
for i = 1:length(sourceList)
    time = sourceList{1, i}.time;
    aMag = sourceList{1, i}.acceleration.magnitude;
    plot(time, aMag)
    hold on
end
title('Acceleration')
xlabel('Time [s]'); ylabel('Acceleration [m s^-2]')
hold off

%% Graph Gyro [needs edit]
figure(4)
for i = 1:length(sourceList)
    time = sourceList{1, i}.time;
    tilt = sourceList{1, i}.gyro.tilt;
    %Gyro plots
    plot(time, tilt)
    hold on
end
title('Tilt')
xlabel('Time (s)'); ylabel('angle [degrees]')
hold off
%% Graph Atmosphere
figure (5)

tiledlayout(2, 2)

% Pressure
for i = 1:length(sourceList)
    time = sourceList{1, i}.time;
    atmP = sourceList{1, i}.atmosphere.pressure;

    plot(time, atmP)
    hold on
end
xlabel('Time [s]'); ylabel('Pressure [Pa]')
hold off


% Temperature
for i = 1:length(sourceList)
    time = sourceList{1, i}.time;
    atmT = sourceList{1, i}.atmosphere.temperature;

    plot(time, atmT)
    hold on
end
xlabel('Time [s]'); ylabel('Temperature [K]')
hold off

% Graph 
for i = 1:length(sourceList)
    atmP = sourceList{1, i}.atmosphere.pressure;
    atmT = sourceList{1, i}.atmosphere.temperature;
    atmD = sourceList{1, i}.atmosphere.density;
    %Atmosphere plots: Thinking of putting all 3 of these into 1 window
    figure(5)
    tiledlayout(2, 2);

    nexttile
    plot(atmP,alt)
    title('Pressure')
    xlabel('Pressure [Pa]'); 
    ylabel('Altitude [m]')
    
    nexttile
    plot(atmT,alt)
    title('Temperature')
    xlabel('Temperature [K]'); ylabel('Altitude [m]')
    
    nexttile
    plot(atmD,alt)
    title('Density')
    xlabel('Density [kg m^-3]'); ylabel('Altitude [m]')
end
    %% Max Q (Idk where to put this)
    figure(6)
    dynamicPressure = (atmD.*(vMag.^2))/2;
    
    tiledlayout(1, 3);

    nexttile
    plot(t,dynamicPressure)
    title('MaxQ v Time')
    xlabel('Time [s]'); ylabel('Dynamic Pressure [Pa]')
    
    nexttile
    plot(alt,dynamicPressure)
    title('MaxQ v Altitude')
    xlabel('Dynamic Pressure [Pa]'); ylabel('Altitude [ft]'); 
end
figure(1)
legend(legendList)
figure(2)
legend(legendList)
figure(3)
legend(legendList)
figure(4)
legend(legendList)
figure(5)
nexttile
legend(legendList)
figure(6)
nexttile
legend(legendList)

end
